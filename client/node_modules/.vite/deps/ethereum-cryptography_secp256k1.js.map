{
  "version": 3,
  "sources": ["../../@noble/hashes/hmac.js", "../../@noble/hashes/_sha2.js", "../../@noble/hashes/sha256.js", "browser-external:crypto", "../../@noble/secp256k1/lib/index.js", "../../ethereum-cryptography/secp256k1.js", "dep:ethereum-cryptography_secp256k1"],
  "sourcesContent": ["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.hmac = void 0;\r\nconst _assert_js_1 = require(\"./_assert.js\");\r\nconst utils_js_1 = require(\"./utils.js\");\r\n// HMAC (RFC 2104)\r\nclass HMAC extends utils_js_1.Hash {\r\n    constructor(hash, _key) {\r\n        super();\r\n        this.finished = false;\r\n        this.destroyed = false;\r\n        _assert_js_1.default.hash(hash);\r\n        const key = (0, utils_js_1.toBytes)(_key);\r\n        this.iHash = hash.create();\r\n        if (!(this.iHash instanceof utils_js_1.Hash))\r\n            throw new TypeError('Expected instance of class which extends utils.Hash');\r\n        const blockLen = (this.blockLen = this.iHash.blockLen);\r\n        this.outputLen = this.iHash.outputLen;\r\n        const pad = new Uint8Array(blockLen);\r\n        // blockLen can be bigger than outputLen\r\n        pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);\r\n        for (let i = 0; i < pad.length; i++)\r\n            pad[i] ^= 0x36;\r\n        this.iHash.update(pad);\r\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\r\n        this.oHash = hash.create();\r\n        // Undo internal XOR && apply outer XOR\r\n        for (let i = 0; i < pad.length; i++)\r\n            pad[i] ^= 0x36 ^ 0x5c;\r\n        this.oHash.update(pad);\r\n        pad.fill(0);\r\n    }\r\n    update(buf) {\r\n        _assert_js_1.default.exists(this);\r\n        this.iHash.update(buf);\r\n        return this;\r\n    }\r\n    digestInto(out) {\r\n        _assert_js_1.default.exists(this);\r\n        _assert_js_1.default.bytes(out, this.outputLen);\r\n        this.finished = true;\r\n        this.iHash.digestInto(out);\r\n        this.oHash.update(out);\r\n        this.oHash.digestInto(out);\r\n        this.destroy();\r\n    }\r\n    digest() {\r\n        const out = new Uint8Array(this.oHash.outputLen);\r\n        this.digestInto(out);\r\n        return out;\r\n    }\r\n    _cloneInto(to) {\r\n        // Create new instance without calling constructor since key already in state and we don't know it.\r\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\r\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\r\n        to = to;\r\n        to.finished = finished;\r\n        to.destroyed = destroyed;\r\n        to.blockLen = blockLen;\r\n        to.outputLen = outputLen;\r\n        to.oHash = oHash._cloneInto(to.oHash);\r\n        to.iHash = iHash._cloneInto(to.iHash);\r\n        return to;\r\n    }\r\n    destroy() {\r\n        this.destroyed = true;\r\n        this.oHash.destroy();\r\n        this.iHash.destroy();\r\n    }\r\n}\r\n/**\r\n * HMAC: RFC2104 message authentication code.\r\n * @param hash - function that would be used e.g. sha256\r\n * @param key - message key\r\n * @param message - message data\r\n */\r\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\r\nexports.hmac = hmac;\r\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SHA2 = void 0;\r\nconst _assert_js_1 = require(\"./_assert.js\");\r\nconst utils_js_1 = require(\"./utils.js\");\r\n// Polyfill for Safari 14\r\nfunction setBigUint64(view, byteOffset, value, isLE) {\r\n    if (typeof view.setBigUint64 === 'function')\r\n        return view.setBigUint64(byteOffset, value, isLE);\r\n    const _32n = BigInt(32);\r\n    const _u32_max = BigInt(0xffffffff);\r\n    const wh = Number((value >> _32n) & _u32_max);\r\n    const wl = Number(value & _u32_max);\r\n    const h = isLE ? 4 : 0;\r\n    const l = isLE ? 0 : 4;\r\n    view.setUint32(byteOffset + h, wh, isLE);\r\n    view.setUint32(byteOffset + l, wl, isLE);\r\n}\r\n// Base SHA2 class (RFC 6234)\r\nclass SHA2 extends utils_js_1.Hash {\r\n    constructor(blockLen, outputLen, padOffset, isLE) {\r\n        super();\r\n        this.blockLen = blockLen;\r\n        this.outputLen = outputLen;\r\n        this.padOffset = padOffset;\r\n        this.isLE = isLE;\r\n        this.finished = false;\r\n        this.length = 0;\r\n        this.pos = 0;\r\n        this.destroyed = false;\r\n        this.buffer = new Uint8Array(blockLen);\r\n        this.view = (0, utils_js_1.createView)(this.buffer);\r\n    }\r\n    update(data) {\r\n        _assert_js_1.default.exists(this);\r\n        const { view, buffer, blockLen } = this;\r\n        data = (0, utils_js_1.toBytes)(data);\r\n        const len = data.length;\r\n        for (let pos = 0; pos < len;) {\r\n            const take = Math.min(blockLen - this.pos, len - pos);\r\n            // Fast path: we have at least one block in input, cast it to view and process\r\n            if (take === blockLen) {\r\n                const dataView = (0, utils_js_1.createView)(data);\r\n                for (; blockLen <= len - pos; pos += blockLen)\r\n                    this.process(dataView, pos);\r\n                continue;\r\n            }\r\n            buffer.set(data.subarray(pos, pos + take), this.pos);\r\n            this.pos += take;\r\n            pos += take;\r\n            if (this.pos === blockLen) {\r\n                this.process(view, 0);\r\n                this.pos = 0;\r\n            }\r\n        }\r\n        this.length += data.length;\r\n        this.roundClean();\r\n        return this;\r\n    }\r\n    digestInto(out) {\r\n        _assert_js_1.default.exists(this);\r\n        _assert_js_1.default.output(out, this);\r\n        this.finished = true;\r\n        // Padding\r\n        // We can avoid allocation of buffer for padding completely if it\r\n        // was previously not allocated here. But it won't change performance.\r\n        const { buffer, view, blockLen, isLE } = this;\r\n        let { pos } = this;\r\n        // append the bit '1' to the message\r\n        buffer[pos++] = 0b10000000;\r\n        this.buffer.subarray(pos).fill(0);\r\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\r\n        if (this.padOffset > blockLen - pos) {\r\n            this.process(view, 0);\r\n            pos = 0;\r\n        }\r\n        // Pad until full block byte with zeros\r\n        for (let i = pos; i < blockLen; i++)\r\n            buffer[i] = 0;\r\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\r\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\r\n        // So we just write lowest 64 bits of that value.\r\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\r\n        this.process(view, 0);\r\n        const oview = (0, utils_js_1.createView)(out);\r\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\r\n    }\r\n    digest() {\r\n        const { buffer, outputLen } = this;\r\n        this.digestInto(buffer);\r\n        const res = buffer.slice(0, outputLen);\r\n        this.destroy();\r\n        return res;\r\n    }\r\n    _cloneInto(to) {\r\n        to || (to = new this.constructor());\r\n        to.set(...this.get());\r\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\r\n        to.length = length;\r\n        to.pos = pos;\r\n        to.finished = finished;\r\n        to.destroyed = destroyed;\r\n        if (length % blockLen)\r\n            to.buffer.set(buffer);\r\n        return to;\r\n    }\r\n}\r\nexports.SHA2 = SHA2;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.sha256 = void 0;\r\nconst _sha2_js_1 = require(\"./_sha2.js\");\r\nconst utils_js_1 = require(\"./utils.js\");\r\n// Choice: a ? b : c\r\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\r\n// Majority function, true if any two inpust is true\r\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\r\n// Round constants:\r\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\r\n// prettier-ignore\r\nconst SHA256_K = new Uint32Array([\r\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n]);\r\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\r\n// prettier-ignore\r\nconst IV = new Uint32Array([\r\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\r\n]);\r\n// Temporary buffer, not used to store anything between runs\r\n// Named this way because it matches specification.\r\nconst SHA256_W = new Uint32Array(64);\r\nclass SHA256 extends _sha2_js_1.SHA2 {\r\n    constructor() {\r\n        super(64, 32, 8, false);\r\n        // We cannot use array here since array allows indexing by variable\r\n        // which means optimizer/compiler cannot use registers.\r\n        this.A = IV[0] | 0;\r\n        this.B = IV[1] | 0;\r\n        this.C = IV[2] | 0;\r\n        this.D = IV[3] | 0;\r\n        this.E = IV[4] | 0;\r\n        this.F = IV[5] | 0;\r\n        this.G = IV[6] | 0;\r\n        this.H = IV[7] | 0;\r\n    }\r\n    get() {\r\n        const { A, B, C, D, E, F, G, H } = this;\r\n        return [A, B, C, D, E, F, G, H];\r\n    }\r\n    // prettier-ignore\r\n    set(A, B, C, D, E, F, G, H) {\r\n        this.A = A | 0;\r\n        this.B = B | 0;\r\n        this.C = C | 0;\r\n        this.D = D | 0;\r\n        this.E = E | 0;\r\n        this.F = F | 0;\r\n        this.G = G | 0;\r\n        this.H = H | 0;\r\n    }\r\n    process(view, offset) {\r\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\r\n        for (let i = 0; i < 16; i++, offset += 4)\r\n            SHA256_W[i] = view.getUint32(offset, false);\r\n        for (let i = 16; i < 64; i++) {\r\n            const W15 = SHA256_W[i - 15];\r\n            const W2 = SHA256_W[i - 2];\r\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\r\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\r\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\r\n        }\r\n        // Compression function main loop, 64 rounds\r\n        let { A, B, C, D, E, F, G, H } = this;\r\n        for (let i = 0; i < 64; i++) {\r\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\r\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\r\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\r\n            H = G;\r\n            G = F;\r\n            F = E;\r\n            E = (D + T1) | 0;\r\n            D = C;\r\n            C = B;\r\n            B = A;\r\n            A = (T1 + T2) | 0;\r\n        }\r\n        // Add the compressed chunk to the current hash value\r\n        A = (A + this.A) | 0;\r\n        B = (B + this.B) | 0;\r\n        C = (C + this.C) | 0;\r\n        D = (D + this.D) | 0;\r\n        E = (E + this.E) | 0;\r\n        F = (F + this.F) | 0;\r\n        G = (G + this.G) | 0;\r\n        H = (H + this.H) | 0;\r\n        this.set(A, B, C, D, E, F, G, H);\r\n    }\r\n    roundClean() {\r\n        SHA256_W.fill(0);\r\n    }\r\n    destroy() {\r\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\r\n        this.buffer.fill(0);\r\n    }\r\n}\r\n/**\r\n * SHA2-256 hash function\r\n * @param message - data that would be hashed\r\n */\r\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\r\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"crypto\" has been externalized for browser compatibility. Cannot access \"crypto.${key}\" in client code.`)\n    }\n  }\n}))", "\"use strict\";\r\n/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.utils = exports.schnorr = exports.verify = exports.signSync = exports.sign = exports.getSharedSecret = exports.recoverPublicKey = exports.getPublicKey = exports.Signature = exports.Point = exports.CURVE = void 0;\r\nconst nodeCrypto = require(\"crypto\");\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\nconst _2n = BigInt(2);\r\nconst _3n = BigInt(3);\r\nconst _8n = BigInt(8);\r\nconst POW_2_256 = _2n ** BigInt(256);\r\nconst CURVE = {\r\n    a: _0n,\r\n    b: BigInt(7),\r\n    P: POW_2_256 - _2n ** BigInt(32) - BigInt(977),\r\n    n: POW_2_256 - BigInt('432420386565659656852420866394968145599'),\r\n    h: _1n,\r\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\r\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\r\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\r\n};\r\nexports.CURVE = CURVE;\r\nfunction weistrass(x) {\r\n    const { a, b } = CURVE;\r\n    const x2 = mod(x * x);\r\n    const x3 = mod(x2 * x);\r\n    return mod(x3 + a * x + b);\r\n}\r\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\r\nclass JacobianPoint {\r\n    constructor(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static fromAffine(p) {\r\n        if (!(p instanceof Point)) {\r\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\r\n        }\r\n        return new JacobianPoint(p.x, p.y, _1n);\r\n    }\r\n    static toAffineBatch(points) {\r\n        const toInv = invertBatch(points.map((p) => p.z));\r\n        return points.map((p, i) => p.toAffine(toInv[i]));\r\n    }\r\n    static normalizeZ(points) {\r\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\r\n    }\r\n    equals(other) {\r\n        if (!(other instanceof JacobianPoint))\r\n            throw new TypeError('JacobianPoint expected');\r\n        const { x: X1, y: Y1, z: Z1 } = this;\r\n        const { x: X2, y: Y2, z: Z2 } = other;\r\n        const Z1Z1 = mod(Z1 ** _2n);\r\n        const Z2Z2 = mod(Z2 ** _2n);\r\n        const U1 = mod(X1 * Z2Z2);\r\n        const U2 = mod(X2 * Z1Z1);\r\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\r\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\r\n        return U1 === U2 && S1 === S2;\r\n    }\r\n    negate() {\r\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\r\n    }\r\n    double() {\r\n        const { x: X1, y: Y1, z: Z1 } = this;\r\n        const A = mod(X1 ** _2n);\r\n        const B = mod(Y1 ** _2n);\r\n        const C = mod(B ** _2n);\r\n        const D = mod(_2n * (mod((X1 + B) ** _2n) - A - C));\r\n        const E = mod(_3n * A);\r\n        const F = mod(E ** _2n);\r\n        const X3 = mod(F - _2n * D);\r\n        const Y3 = mod(E * (D - X3) - _8n * C);\r\n        const Z3 = mod(_2n * Y1 * Z1);\r\n        return new JacobianPoint(X3, Y3, Z3);\r\n    }\r\n    add(other) {\r\n        if (!(other instanceof JacobianPoint))\r\n            throw new TypeError('JacobianPoint expected');\r\n        const { x: X1, y: Y1, z: Z1 } = this;\r\n        const { x: X2, y: Y2, z: Z2 } = other;\r\n        if (X2 === _0n || Y2 === _0n)\r\n            return this;\r\n        if (X1 === _0n || Y1 === _0n)\r\n            return other;\r\n        const Z1Z1 = mod(Z1 ** _2n);\r\n        const Z2Z2 = mod(Z2 ** _2n);\r\n        const U1 = mod(X1 * Z2Z2);\r\n        const U2 = mod(X2 * Z1Z1);\r\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\r\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\r\n        const H = mod(U2 - U1);\r\n        const r = mod(S2 - S1);\r\n        if (H === _0n) {\r\n            if (r === _0n) {\r\n                return this.double();\r\n            }\r\n            else {\r\n                return JacobianPoint.ZERO;\r\n            }\r\n        }\r\n        const HH = mod(H ** _2n);\r\n        const HHH = mod(H * HH);\r\n        const V = mod(U1 * HH);\r\n        const X3 = mod(r ** _2n - HHH - _2n * V);\r\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\r\n        const Z3 = mod(Z1 * Z2 * H);\r\n        return new JacobianPoint(X3, Y3, Z3);\r\n    }\r\n    subtract(other) {\r\n        return this.add(other.negate());\r\n    }\r\n    multiplyUnsafe(scalar) {\r\n        const P0 = JacobianPoint.ZERO;\r\n        if (typeof scalar === 'bigint' && scalar === _0n)\r\n            return P0;\r\n        let n = normalizeScalar(scalar);\r\n        if (n === _1n)\r\n            return this;\r\n        if (!USE_ENDOMORPHISM) {\r\n            let p = P0;\r\n            let d = this;\r\n            while (n > _0n) {\r\n                if (n & _1n)\r\n                    p = p.add(d);\r\n                d = d.double();\r\n                n >>= _1n;\r\n            }\r\n            return p;\r\n        }\r\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\r\n        let k1p = P0;\r\n        let k2p = P0;\r\n        let d = this;\r\n        while (k1 > _0n || k2 > _0n) {\r\n            if (k1 & _1n)\r\n                k1p = k1p.add(d);\r\n            if (k2 & _1n)\r\n                k2p = k2p.add(d);\r\n            d = d.double();\r\n            k1 >>= _1n;\r\n            k2 >>= _1n;\r\n        }\r\n        if (k1neg)\r\n            k1p = k1p.negate();\r\n        if (k2neg)\r\n            k2p = k2p.negate();\r\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\r\n        return k1p.add(k2p);\r\n    }\r\n    precomputeWindow(W) {\r\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\r\n        const points = [];\r\n        let p = this;\r\n        let base = p;\r\n        for (let window = 0; window < windows; window++) {\r\n            base = p;\r\n            points.push(base);\r\n            for (let i = 1; i < 2 ** (W - 1); i++) {\r\n                base = base.add(p);\r\n                points.push(base);\r\n            }\r\n            p = base.double();\r\n        }\r\n        return points;\r\n    }\r\n    wNAF(n, affinePoint) {\r\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\r\n            affinePoint = Point.BASE;\r\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\r\n        if (256 % W) {\r\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\r\n        }\r\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\r\n        if (!precomputes) {\r\n            precomputes = this.precomputeWindow(W);\r\n            if (affinePoint && W !== 1) {\r\n                precomputes = JacobianPoint.normalizeZ(precomputes);\r\n                pointPrecomputes.set(affinePoint, precomputes);\r\n            }\r\n        }\r\n        let p = JacobianPoint.ZERO;\r\n        let f = JacobianPoint.ZERO;\r\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\r\n        const windowSize = 2 ** (W - 1);\r\n        const mask = BigInt(2 ** W - 1);\r\n        const maxNumber = 2 ** W;\r\n        const shiftBy = BigInt(W);\r\n        for (let window = 0; window < windows; window++) {\r\n            const offset = window * windowSize;\r\n            let wbits = Number(n & mask);\r\n            n >>= shiftBy;\r\n            if (wbits > windowSize) {\r\n                wbits -= maxNumber;\r\n                n += _1n;\r\n            }\r\n            if (wbits === 0) {\r\n                let pr = precomputes[offset];\r\n                if (window % 2)\r\n                    pr = pr.negate();\r\n                f = f.add(pr);\r\n            }\r\n            else {\r\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\r\n                if (wbits < 0)\r\n                    cached = cached.negate();\r\n                p = p.add(cached);\r\n            }\r\n        }\r\n        return { p, f };\r\n    }\r\n    multiply(scalar, affinePoint) {\r\n        let n = normalizeScalar(scalar);\r\n        let point;\r\n        let fake;\r\n        if (USE_ENDOMORPHISM) {\r\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\r\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\r\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\r\n            if (k1neg)\r\n                k1p = k1p.negate();\r\n            if (k2neg)\r\n                k2p = k2p.negate();\r\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\r\n            point = k1p.add(k2p);\r\n            fake = f1p.add(f2p);\r\n        }\r\n        else {\r\n            const { p, f } = this.wNAF(n, affinePoint);\r\n            point = p;\r\n            fake = f;\r\n        }\r\n        return JacobianPoint.normalizeZ([point, fake])[0];\r\n    }\r\n    toAffine(invZ = invert(this.z)) {\r\n        const { x, y, z } = this;\r\n        const iz1 = invZ;\r\n        const iz2 = mod(iz1 * iz1);\r\n        const iz3 = mod(iz2 * iz1);\r\n        const ax = mod(x * iz2);\r\n        const ay = mod(y * iz3);\r\n        const zz = mod(z * iz1);\r\n        if (zz !== _1n)\r\n            throw new Error('invZ was invalid');\r\n        return new Point(ax, ay);\r\n    }\r\n}\r\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\r\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\r\nconst pointPrecomputes = new WeakMap();\r\nclass Point {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    _setWindowSize(windowSize) {\r\n        this._WINDOW_SIZE = windowSize;\r\n        pointPrecomputes.delete(this);\r\n    }\r\n    static fromCompressedHex(bytes) {\r\n        const isShort = bytes.length === 32;\r\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\r\n        if (!isValidFieldElement(x))\r\n            throw new Error('Point is not on curve');\r\n        const y2 = weistrass(x);\r\n        let y = sqrtMod(y2);\r\n        const isYOdd = (y & _1n) === _1n;\r\n        if (isShort) {\r\n            if (isYOdd)\r\n                y = mod(-y);\r\n        }\r\n        else {\r\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\r\n            if (isFirstByteOdd !== isYOdd)\r\n                y = mod(-y);\r\n        }\r\n        const point = new Point(x, y);\r\n        point.assertValidity();\r\n        return point;\r\n    }\r\n    static fromUncompressedHex(bytes) {\r\n        const x = bytesToNumber(bytes.subarray(1, 33));\r\n        const y = bytesToNumber(bytes.subarray(33, 65));\r\n        const point = new Point(x, y);\r\n        point.assertValidity();\r\n        return point;\r\n    }\r\n    static fromHex(hex) {\r\n        const bytes = ensureBytes(hex);\r\n        const len = bytes.length;\r\n        const header = bytes[0];\r\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\r\n            return this.fromCompressedHex(bytes);\r\n        }\r\n        if (len === 65 && header === 0x04)\r\n            return this.fromUncompressedHex(bytes);\r\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\r\n    }\r\n    static fromPrivateKey(privateKey) {\r\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\r\n    }\r\n    static fromSignature(msgHash, signature, recovery) {\r\n        msgHash = ensureBytes(msgHash);\r\n        const h = truncateHash(msgHash);\r\n        const { r, s } = normalizeSignature(signature);\r\n        if (recovery !== 0 && recovery !== 1) {\r\n            throw new Error('Cannot recover signature: invalid recovery bit');\r\n        }\r\n        const prefix = recovery & 1 ? '03' : '02';\r\n        const R = Point.fromHex(prefix + numTo32bStr(r));\r\n        const { n } = CURVE;\r\n        const rinv = invert(r, n);\r\n        const u1 = mod(-h * rinv, n);\r\n        const u2 = mod(s * rinv, n);\r\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\r\n        if (!Q)\r\n            throw new Error('Cannot recover signature: point at infinify');\r\n        Q.assertValidity();\r\n        return Q;\r\n    }\r\n    toRawBytes(isCompressed = false) {\r\n        return hexToBytes(this.toHex(isCompressed));\r\n    }\r\n    toHex(isCompressed = false) {\r\n        const x = numTo32bStr(this.x);\r\n        if (isCompressed) {\r\n            const prefix = this.y & _1n ? '03' : '02';\r\n            return `${prefix}${x}`;\r\n        }\r\n        else {\r\n            return `04${x}${numTo32bStr(this.y)}`;\r\n        }\r\n    }\r\n    toHexX() {\r\n        return this.toHex(true).slice(2);\r\n    }\r\n    toRawX() {\r\n        return this.toRawBytes(true).slice(1);\r\n    }\r\n    assertValidity() {\r\n        const msg = 'Point is not on elliptic curve';\r\n        const { x, y } = this;\r\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\r\n            throw new Error(msg);\r\n        const left = mod(y * y);\r\n        const right = weistrass(x);\r\n        if (mod(left - right) !== _0n)\r\n            throw new Error(msg);\r\n    }\r\n    equals(other) {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n    negate() {\r\n        return new Point(this.x, mod(-this.y));\r\n    }\r\n    double() {\r\n        return JacobianPoint.fromAffine(this).double().toAffine();\r\n    }\r\n    add(other) {\r\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\r\n    }\r\n    subtract(other) {\r\n        return this.add(other.negate());\r\n    }\r\n    multiply(scalar) {\r\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\r\n    }\r\n    multiplyAndAddUnsafe(Q, a, b) {\r\n        const P = JacobianPoint.fromAffine(this);\r\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\r\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\r\n        const sum = aP.add(bQ);\r\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\r\n    }\r\n}\r\nexports.Point = Point;\r\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\r\nPoint.ZERO = new Point(_0n, _0n);\r\nfunction sliceDER(s) {\r\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\r\n}\r\nfunction parseDERInt(data) {\r\n    if (data.length < 2 || data[0] !== 0x02) {\r\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\r\n    }\r\n    const len = data[1];\r\n    const res = data.subarray(2, len + 2);\r\n    if (!len || res.length !== len) {\r\n        throw new Error(`Invalid signature integer: wrong length`);\r\n    }\r\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\r\n        throw new Error('Invalid signature integer: trailing length');\r\n    }\r\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\r\n}\r\nfunction parseDERSignature(data) {\r\n    if (data.length < 2 || data[0] != 0x30) {\r\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\r\n    }\r\n    if (data[1] !== data.length - 2) {\r\n        throw new Error('Invalid signature: incorrect length');\r\n    }\r\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\r\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\r\n    if (rBytesLeft.length) {\r\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\r\n    }\r\n    return { r, s };\r\n}\r\nclass Signature {\r\n    constructor(r, s) {\r\n        this.r = r;\r\n        this.s = s;\r\n        this.assertValidity();\r\n    }\r\n    static fromCompact(hex) {\r\n        const arr = isUint8a(hex);\r\n        const name = 'Signature.fromCompact';\r\n        if (typeof hex !== 'string' && !arr)\r\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\r\n        const str = arr ? bytesToHex(hex) : hex;\r\n        if (str.length !== 128)\r\n            throw new Error(`${name}: Expected 64-byte hex`);\r\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\r\n    }\r\n    static fromDER(hex) {\r\n        const arr = isUint8a(hex);\r\n        if (typeof hex !== 'string' && !arr)\r\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\r\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\r\n        return new Signature(r, s);\r\n    }\r\n    static fromHex(hex) {\r\n        return this.fromDER(hex);\r\n    }\r\n    assertValidity() {\r\n        const { r, s } = this;\r\n        if (!isWithinCurveOrder(r))\r\n            throw new Error('Invalid Signature: r must be 0 < r < n');\r\n        if (!isWithinCurveOrder(s))\r\n            throw new Error('Invalid Signature: s must be 0 < s < n');\r\n    }\r\n    hasHighS() {\r\n        const HALF = CURVE.n >> _1n;\r\n        return this.s > HALF;\r\n    }\r\n    normalizeS() {\r\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\r\n    }\r\n    toDERRawBytes(isCompressed = false) {\r\n        return hexToBytes(this.toDERHex(isCompressed));\r\n    }\r\n    toDERHex(isCompressed = false) {\r\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\r\n        if (isCompressed)\r\n            return sHex;\r\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\r\n        const rLen = numberToHexUnpadded(rHex.length / 2);\r\n        const sLen = numberToHexUnpadded(sHex.length / 2);\r\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\r\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\r\n    }\r\n    toRawBytes() {\r\n        return this.toDERRawBytes();\r\n    }\r\n    toHex() {\r\n        return this.toDERHex();\r\n    }\r\n    toCompactRawBytes() {\r\n        return hexToBytes(this.toCompactHex());\r\n    }\r\n    toCompactHex() {\r\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\r\n    }\r\n}\r\nexports.Signature = Signature;\r\nfunction concatBytes(...arrays) {\r\n    if (!arrays.every(isUint8a))\r\n        throw new Error('Uint8Array list expected');\r\n    if (arrays.length === 1)\r\n        return arrays[0];\r\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\r\n    const result = new Uint8Array(length);\r\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\r\n        const arr = arrays[i];\r\n        result.set(arr, pad);\r\n        pad += arr.length;\r\n    }\r\n    return result;\r\n}\r\nfunction isUint8a(bytes) {\r\n    return bytes instanceof Uint8Array;\r\n}\r\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\r\nfunction bytesToHex(uint8a) {\r\n    if (!(uint8a instanceof Uint8Array))\r\n        throw new Error('Expected Uint8Array');\r\n    let hex = '';\r\n    for (let i = 0; i < uint8a.length; i++) {\r\n        hex += hexes[uint8a[i]];\r\n    }\r\n    return hex;\r\n}\r\nfunction numTo32bStr(num) {\r\n    if (num > POW_2_256)\r\n        throw new Error('Expected number < 2^256');\r\n    return num.toString(16).padStart(64, '0');\r\n}\r\nfunction numTo32b(num) {\r\n    return hexToBytes(numTo32bStr(num));\r\n}\r\nfunction numberToHexUnpadded(num) {\r\n    const hex = num.toString(16);\r\n    return hex.length & 1 ? `0${hex}` : hex;\r\n}\r\nfunction hexToNumber(hex) {\r\n    if (typeof hex !== 'string') {\r\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\r\n    }\r\n    return BigInt(`0x${hex}`);\r\n}\r\nfunction hexToBytes(hex) {\r\n    if (typeof hex !== 'string') {\r\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\r\n    }\r\n    if (hex.length % 2)\r\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\r\n    const array = new Uint8Array(hex.length / 2);\r\n    for (let i = 0; i < array.length; i++) {\r\n        const j = i * 2;\r\n        const hexByte = hex.slice(j, j + 2);\r\n        const byte = Number.parseInt(hexByte, 16);\r\n        if (Number.isNaN(byte) || byte < 0)\r\n            throw new Error('Invalid byte sequence');\r\n        array[i] = byte;\r\n    }\r\n    return array;\r\n}\r\nfunction bytesToNumber(bytes) {\r\n    return hexToNumber(bytesToHex(bytes));\r\n}\r\nfunction ensureBytes(hex) {\r\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\r\n}\r\nfunction normalizeScalar(num) {\r\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\r\n        return BigInt(num);\r\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\r\n        return num;\r\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\r\n}\r\nfunction mod(a, b = CURVE.P) {\r\n    const result = a % b;\r\n    return result >= _0n ? result : b + result;\r\n}\r\nfunction pow2(x, power) {\r\n    const { P } = CURVE;\r\n    let res = x;\r\n    while (power-- > _0n) {\r\n        res *= res;\r\n        res %= P;\r\n    }\r\n    return res;\r\n}\r\nfunction sqrtMod(x) {\r\n    const { P } = CURVE;\r\n    const _6n = BigInt(6);\r\n    const _11n = BigInt(11);\r\n    const _22n = BigInt(22);\r\n    const _23n = BigInt(23);\r\n    const _44n = BigInt(44);\r\n    const _88n = BigInt(88);\r\n    const b2 = (x * x * x) % P;\r\n    const b3 = (b2 * b2 * x) % P;\r\n    const b6 = (pow2(b3, _3n) * b3) % P;\r\n    const b9 = (pow2(b6, _3n) * b3) % P;\r\n    const b11 = (pow2(b9, _2n) * b2) % P;\r\n    const b22 = (pow2(b11, _11n) * b11) % P;\r\n    const b44 = (pow2(b22, _22n) * b22) % P;\r\n    const b88 = (pow2(b44, _44n) * b44) % P;\r\n    const b176 = (pow2(b88, _88n) * b88) % P;\r\n    const b220 = (pow2(b176, _44n) * b44) % P;\r\n    const b223 = (pow2(b220, _3n) * b3) % P;\r\n    const t1 = (pow2(b223, _23n) * b22) % P;\r\n    const t2 = (pow2(t1, _6n) * b2) % P;\r\n    return pow2(t2, _2n);\r\n}\r\nfunction invert(number, modulo = CURVE.P) {\r\n    if (number === _0n || modulo <= _0n) {\r\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\r\n    }\r\n    let a = mod(number, modulo);\r\n    let b = modulo;\r\n    let x = _0n, y = _1n, u = _1n, v = _0n;\r\n    while (a !== _0n) {\r\n        const q = b / a;\r\n        const r = b % a;\r\n        const m = x - u * q;\r\n        const n = y - v * q;\r\n        b = a, a = r, x = u, y = v, u = m, v = n;\r\n    }\r\n    const gcd = b;\r\n    if (gcd !== _1n)\r\n        throw new Error('invert: does not exist');\r\n    return mod(x, modulo);\r\n}\r\nfunction invertBatch(nums, p = CURVE.P) {\r\n    const scratch = new Array(nums.length);\r\n    const lastMultiplied = nums.reduce((acc, num, i) => {\r\n        if (num === _0n)\r\n            return acc;\r\n        scratch[i] = acc;\r\n        return mod(acc * num, p);\r\n    }, _1n);\r\n    const inverted = invert(lastMultiplied, p);\r\n    nums.reduceRight((acc, num, i) => {\r\n        if (num === _0n)\r\n            return acc;\r\n        scratch[i] = mod(acc * scratch[i], p);\r\n        return mod(acc * num, p);\r\n    }, inverted);\r\n    return scratch;\r\n}\r\nconst divNearest = (a, b) => (a + b / _2n) / b;\r\nconst POW_2_128 = _2n ** BigInt(128);\r\nfunction splitScalarEndo(k) {\r\n    const { n } = CURVE;\r\n    const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\r\n    const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\r\n    const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\r\n    const b2 = a1;\r\n    const c1 = divNearest(b2 * k, n);\r\n    const c2 = divNearest(-b1 * k, n);\r\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\r\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\r\n    const k1neg = k1 > POW_2_128;\r\n    const k2neg = k2 > POW_2_128;\r\n    if (k1neg)\r\n        k1 = n - k1;\r\n    if (k2neg)\r\n        k2 = n - k2;\r\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\r\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\r\n    }\r\n    return { k1neg, k1, k2neg, k2 };\r\n}\r\nfunction truncateHash(hash) {\r\n    const { n } = CURVE;\r\n    const byteLength = hash.length;\r\n    const delta = byteLength * 8 - 256;\r\n    let h = bytesToNumber(hash);\r\n    if (delta > 0)\r\n        h = h >> BigInt(delta);\r\n    if (h >= n)\r\n        h -= n;\r\n    return h;\r\n}\r\nclass HmacDrbg {\r\n    constructor() {\r\n        this.v = new Uint8Array(32).fill(1);\r\n        this.k = new Uint8Array(32).fill(0);\r\n        this.counter = 0;\r\n    }\r\n    hmac(...values) {\r\n        return exports.utils.hmacSha256(this.k, ...values);\r\n    }\r\n    hmacSync(...values) {\r\n        if (typeof exports.utils.hmacSha256Sync !== 'function')\r\n            throw new Error('utils.hmacSha256Sync is undefined, you need to set it');\r\n        const res = exports.utils.hmacSha256Sync(this.k, ...values);\r\n        if (res instanceof Promise)\r\n            throw new Error('To use sync sign(), ensure utils.hmacSha256 is sync');\r\n        return res;\r\n    }\r\n    incr() {\r\n        if (this.counter >= 1000) {\r\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\r\n        }\r\n        this.counter += 1;\r\n    }\r\n    async reseed(seed = new Uint8Array()) {\r\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\r\n        this.v = await this.hmac(this.v);\r\n        if (seed.length === 0)\r\n            return;\r\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\r\n        this.v = await this.hmac(this.v);\r\n    }\r\n    reseedSync(seed = new Uint8Array()) {\r\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\r\n        this.v = this.hmacSync(this.v);\r\n        if (seed.length === 0)\r\n            return;\r\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\r\n        this.v = this.hmacSync(this.v);\r\n    }\r\n    async generate() {\r\n        this.incr();\r\n        this.v = await this.hmac(this.v);\r\n        return this.v;\r\n    }\r\n    generateSync() {\r\n        this.incr();\r\n        this.v = this.hmacSync(this.v);\r\n        return this.v;\r\n    }\r\n}\r\nfunction isWithinCurveOrder(num) {\r\n    return _0n < num && num < CURVE.n;\r\n}\r\nfunction isValidFieldElement(num) {\r\n    return _0n < num && num < CURVE.P;\r\n}\r\nfunction kmdToSig(kBytes, m, d) {\r\n    const k = bytesToNumber(kBytes);\r\n    if (!isWithinCurveOrder(k))\r\n        return;\r\n    const { n } = CURVE;\r\n    const q = Point.BASE.multiply(k);\r\n    const r = mod(q.x, n);\r\n    if (r === _0n)\r\n        return;\r\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\r\n    if (s === _0n)\r\n        return;\r\n    const sig = new Signature(r, s);\r\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\r\n    return { sig, recovery };\r\n}\r\nfunction normalizePrivateKey(key) {\r\n    let num;\r\n    if (typeof key === 'bigint') {\r\n        num = key;\r\n    }\r\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\r\n        num = BigInt(key);\r\n    }\r\n    else if (typeof key === 'string') {\r\n        if (key.length !== 64)\r\n            throw new Error('Expected 32 bytes of private key');\r\n        num = hexToNumber(key);\r\n    }\r\n    else if (isUint8a(key)) {\r\n        if (key.length !== 32)\r\n            throw new Error('Expected 32 bytes of private key');\r\n        num = bytesToNumber(key);\r\n    }\r\n    else {\r\n        throw new TypeError('Expected valid private key');\r\n    }\r\n    if (!isWithinCurveOrder(num))\r\n        throw new Error('Expected private key: 0 < key < n');\r\n    return num;\r\n}\r\nfunction normalizePublicKey(publicKey) {\r\n    if (publicKey instanceof Point) {\r\n        publicKey.assertValidity();\r\n        return publicKey;\r\n    }\r\n    else {\r\n        return Point.fromHex(publicKey);\r\n    }\r\n}\r\nfunction normalizeSignature(signature) {\r\n    if (signature instanceof Signature) {\r\n        signature.assertValidity();\r\n        return signature;\r\n    }\r\n    try {\r\n        return Signature.fromDER(signature);\r\n    }\r\n    catch (error) {\r\n        return Signature.fromCompact(signature);\r\n    }\r\n}\r\nfunction getPublicKey(privateKey, isCompressed = false) {\r\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\r\n}\r\nexports.getPublicKey = getPublicKey;\r\nfunction recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\r\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\r\n}\r\nexports.recoverPublicKey = recoverPublicKey;\r\nfunction isPub(item) {\r\n    const arr = isUint8a(item);\r\n    const str = typeof item === 'string';\r\n    const len = (arr || str) && item.length;\r\n    if (arr)\r\n        return len === 33 || len === 65;\r\n    if (str)\r\n        return len === 66 || len === 130;\r\n    if (item instanceof Point)\r\n        return true;\r\n    return false;\r\n}\r\nfunction getSharedSecret(privateA, publicB, isCompressed = false) {\r\n    if (isPub(privateA))\r\n        throw new TypeError('getSharedSecret: first arg must be private key');\r\n    if (!isPub(publicB))\r\n        throw new TypeError('getSharedSecret: second arg must be public key');\r\n    const b = normalizePublicKey(publicB);\r\n    b.assertValidity();\r\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\r\n}\r\nexports.getSharedSecret = getSharedSecret;\r\nfunction bits2int(bytes) {\r\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\r\n    return bytesToNumber(slice);\r\n}\r\nfunction bits2octets(bytes) {\r\n    const z1 = bits2int(bytes);\r\n    const z2 = mod(z1, CURVE.n);\r\n    return int2octets(z2 < _0n ? z1 : z2);\r\n}\r\nfunction int2octets(num) {\r\n    if (typeof num !== 'bigint')\r\n        throw new Error('Expected bigint');\r\n    const hex = numTo32bStr(num);\r\n    return hexToBytes(hex);\r\n}\r\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\r\n    if (msgHash == null)\r\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\r\n    const h1 = ensureBytes(msgHash);\r\n    const d = normalizePrivateKey(privateKey);\r\n    const seedArgs = [int2octets(d), bits2octets(h1)];\r\n    if (extraEntropy != null) {\r\n        if (extraEntropy === true)\r\n            extraEntropy = exports.utils.randomBytes(32);\r\n        const e = ensureBytes(extraEntropy);\r\n        if (e.length !== 32)\r\n            throw new Error('sign: Expected 32 bytes of extra data');\r\n        seedArgs.push(e);\r\n    }\r\n    const seed = concatBytes(...seedArgs);\r\n    const m = bits2int(h1);\r\n    return { seed, m, d };\r\n}\r\nfunction finalizeSig(recSig, opts) {\r\n    let { sig, recovery } = recSig;\r\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\r\n    if (canonical && sig.hasHighS()) {\r\n        sig = sig.normalizeS();\r\n        recovery ^= 1;\r\n    }\r\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\r\n    return recovered ? [hashed, recovery] : hashed;\r\n}\r\nasync function sign(msgHash, privKey, opts = {}) {\r\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\r\n    let sig;\r\n    const drbg = new HmacDrbg();\r\n    await drbg.reseed(seed);\r\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\r\n        await drbg.reseed();\r\n    return finalizeSig(sig, opts);\r\n}\r\nexports.sign = sign;\r\nfunction signSync(msgHash, privKey, opts = {}) {\r\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\r\n    let sig;\r\n    const drbg = new HmacDrbg();\r\n    drbg.reseedSync(seed);\r\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\r\n        drbg.reseedSync();\r\n    return finalizeSig(sig, opts);\r\n}\r\nexports.signSync = signSync;\r\nconst vopts = { strict: true };\r\nfunction verify(signature, msgHash, publicKey, opts = vopts) {\r\n    let sig;\r\n    try {\r\n        sig = normalizeSignature(signature);\r\n        msgHash = ensureBytes(msgHash);\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n    const { r, s } = sig;\r\n    if (opts.strict && sig.hasHighS())\r\n        return false;\r\n    const h = truncateHash(msgHash);\r\n    let P;\r\n    try {\r\n        P = normalizePublicKey(publicKey);\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n    const { n } = CURVE;\r\n    const sinv = invert(s, n);\r\n    const u1 = mod(h * sinv, n);\r\n    const u2 = mod(r * sinv, n);\r\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\r\n    if (!R)\r\n        return false;\r\n    const v = mod(R.x, n);\r\n    return v === r;\r\n}\r\nexports.verify = verify;\r\nfunction finalizeSchnorrChallenge(ch) {\r\n    return mod(bytesToNumber(ch), CURVE.n);\r\n}\r\nfunction hasEvenY(point) {\r\n    return (point.y & _1n) === _0n;\r\n}\r\nclass SchnorrSignature {\r\n    constructor(r, s) {\r\n        this.r = r;\r\n        this.s = s;\r\n        this.assertValidity();\r\n    }\r\n    static fromHex(hex) {\r\n        const bytes = ensureBytes(hex);\r\n        if (bytes.length !== 64)\r\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\r\n        const r = bytesToNumber(bytes.subarray(0, 32));\r\n        const s = bytesToNumber(bytes.subarray(32, 64));\r\n        return new SchnorrSignature(r, s);\r\n    }\r\n    assertValidity() {\r\n        const { r, s } = this;\r\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\r\n            throw new Error('Invalid signature');\r\n    }\r\n    toHex() {\r\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\r\n    }\r\n    toRawBytes() {\r\n        return hexToBytes(this.toHex());\r\n    }\r\n}\r\nfunction schnorrGetPublicKey(privateKey) {\r\n    return Point.fromPrivateKey(privateKey).toRawX();\r\n}\r\nfunction initSchnorrSigArgs(message, privateKey, auxRand) {\r\n    if (message == null)\r\n        throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\r\n    const m = ensureBytes(message);\r\n    const d0 = normalizePrivateKey(privateKey);\r\n    const rand = ensureBytes(auxRand);\r\n    if (rand.length !== 32)\r\n        throw new TypeError('sign: Expected 32 bytes of aux randomness');\r\n    const P = Point.fromPrivateKey(d0);\r\n    const px = P.toRawX();\r\n    const d = hasEvenY(P) ? d0 : CURVE.n - d0;\r\n    return { m, P, px, d, rand };\r\n}\r\nfunction initSchnorrNonce(d, t0h) {\r\n    return numTo32b(d ^ bytesToNumber(t0h));\r\n}\r\nfunction finalizeSchnorrNonce(k0h) {\r\n    const k0 = mod(bytesToNumber(k0h), CURVE.n);\r\n    if (k0 === _0n)\r\n        throw new Error('sign: Creation of signature failed. k is zero');\r\n    const R = Point.fromPrivateKey(k0);\r\n    const rx = R.toRawX();\r\n    const k = hasEvenY(R) ? k0 : CURVE.n - k0;\r\n    return { R, rx, k };\r\n}\r\nfunction finalizeSchnorrSig(R, k, e, d) {\r\n    return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\r\n}\r\nasync function schnorrSign(message, privateKey, auxRand = exports.utils.randomBytes()) {\r\n    const { m, px, d, rand } = initSchnorrSigArgs(message, privateKey, auxRand);\r\n    const t = initSchnorrNonce(d, await exports.utils.taggedHash(TAGS.aux, rand));\r\n    const { R, rx, k } = finalizeSchnorrNonce(await exports.utils.taggedHash(TAGS.nonce, t, px, m));\r\n    const e = finalizeSchnorrChallenge(await exports.utils.taggedHash(TAGS.challenge, rx, px, m));\r\n    const sig = finalizeSchnorrSig(R, k, e, d);\r\n    const isValid = await schnorrVerify(sig, m, px);\r\n    if (!isValid)\r\n        throw new Error('sign: Invalid signature produced');\r\n    return sig;\r\n}\r\nfunction schnorrSignSync(message, privateKey, auxRand = exports.utils.randomBytes()) {\r\n    const { m, px, d, rand } = initSchnorrSigArgs(message, privateKey, auxRand);\r\n    const t = initSchnorrNonce(d, exports.utils.taggedHashSync(TAGS.aux, rand));\r\n    const { R, rx, k } = finalizeSchnorrNonce(exports.utils.taggedHashSync(TAGS.nonce, t, px, m));\r\n    const e = finalizeSchnorrChallenge(exports.utils.taggedHashSync(TAGS.challenge, rx, px, m));\r\n    const sig = finalizeSchnorrSig(R, k, e, d);\r\n    const isValid = schnorrVerifySync(sig, m, px);\r\n    if (!isValid)\r\n        throw new Error('sign: Invalid signature produced');\r\n    return sig;\r\n}\r\nfunction initSchnorrVerify(signature, message, publicKey) {\r\n    const raw = signature instanceof SchnorrSignature;\r\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\r\n    if (raw)\r\n        sig.assertValidity();\r\n    return {\r\n        ...sig,\r\n        m: ensureBytes(message),\r\n        P: normalizePublicKey(publicKey),\r\n    };\r\n}\r\nfunction finalizeSchnorrVerify(r, P, s, e) {\r\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\r\n    if (!R || !hasEvenY(R) || R.x !== r)\r\n        return false;\r\n    return true;\r\n}\r\nasync function schnorrVerify(signature, message, publicKey) {\r\n    try {\r\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\r\n        const e = finalizeSchnorrChallenge(await exports.utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\r\n        return finalizeSchnorrVerify(r, P, s, e);\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n}\r\nfunction schnorrVerifySync(signature, message, publicKey) {\r\n    try {\r\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\r\n        const e = finalizeSchnorrChallenge(exports.utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\r\n        return finalizeSchnorrVerify(r, P, s, e);\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n}\r\nexports.schnorr = {\r\n    Signature: SchnorrSignature,\r\n    getPublicKey: schnorrGetPublicKey,\r\n    sign: schnorrSign,\r\n    verify: schnorrVerify,\r\n    signSync: schnorrSignSync,\r\n    verifySync: schnorrVerifySync,\r\n};\r\nPoint.BASE._setWindowSize(8);\r\nconst crypto = {\r\n    node: nodeCrypto,\r\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\r\n};\r\nconst TAGS = {\r\n    challenge: 'BIP0340/challenge',\r\n    aux: 'BIP0340/aux',\r\n    nonce: 'BIP0340/nonce',\r\n};\r\nconst TAGGED_HASH_PREFIXES = {};\r\nexports.utils = {\r\n    isValidPrivateKey(privateKey) {\r\n        try {\r\n            normalizePrivateKey(privateKey);\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            return false;\r\n        }\r\n    },\r\n    privateAdd: (privateKey, tweak) => {\r\n        const p = normalizePrivateKey(privateKey);\r\n        const t = normalizePrivateKey(tweak);\r\n        return numTo32b(mod(p + t, CURVE.n));\r\n    },\r\n    privateNegate: (privateKey) => {\r\n        const p = normalizePrivateKey(privateKey);\r\n        return numTo32b(CURVE.n - p);\r\n    },\r\n    pointAddScalar: (p, tweak, isCompressed) => {\r\n        const P = Point.fromHex(p);\r\n        const t = normalizePrivateKey(tweak);\r\n        const Q = Point.BASE.multiplyAndAddUnsafe(P, t, _1n);\r\n        if (!Q)\r\n            throw new Error('Tweaked point at infinity');\r\n        return Q.toRawBytes(isCompressed);\r\n    },\r\n    pointMultiply: (p, tweak, isCompressed) => {\r\n        const P = Point.fromHex(p);\r\n        const t = bytesToNumber(ensureBytes(tweak));\r\n        return P.multiply(t).toRawBytes(isCompressed);\r\n    },\r\n    hashToPrivateKey: (hash) => {\r\n        hash = ensureBytes(hash);\r\n        if (hash.length < 40 || hash.length > 1024)\r\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\r\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\r\n        return numTo32b(num);\r\n    },\r\n    randomBytes: (bytesLength = 32) => {\r\n        if (crypto.web) {\r\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\r\n        }\r\n        else if (crypto.node) {\r\n            const { randomBytes } = crypto.node;\r\n            return Uint8Array.from(randomBytes(bytesLength));\r\n        }\r\n        else {\r\n            throw new Error(\"The environment doesn't have randomBytes function\");\r\n        }\r\n    },\r\n    randomPrivateKey: () => {\r\n        return exports.utils.hashToPrivateKey(exports.utils.randomBytes(40));\r\n    },\r\n    bytesToHex,\r\n    hexToBytes,\r\n    concatBytes,\r\n    mod,\r\n    invert,\r\n    sha256: async (...messages) => {\r\n        if (crypto.web) {\r\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\r\n            return new Uint8Array(buffer);\r\n        }\r\n        else if (crypto.node) {\r\n            const { createHash } = crypto.node;\r\n            const hash = createHash('sha256');\r\n            messages.forEach((m) => hash.update(m));\r\n            return Uint8Array.from(hash.digest());\r\n        }\r\n        else {\r\n            throw new Error(\"The environment doesn't have sha256 function\");\r\n        }\r\n    },\r\n    hmacSha256: async (key, ...messages) => {\r\n        if (crypto.web) {\r\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\r\n            const message = concatBytes(...messages);\r\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\r\n            return new Uint8Array(buffer);\r\n        }\r\n        else if (crypto.node) {\r\n            const { createHmac } = crypto.node;\r\n            const hash = createHmac('sha256', key);\r\n            messages.forEach((m) => hash.update(m));\r\n            return Uint8Array.from(hash.digest());\r\n        }\r\n        else {\r\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\r\n        }\r\n    },\r\n    sha256Sync: undefined,\r\n    hmacSha256Sync: undefined,\r\n    taggedHash: async (tag, ...messages) => {\r\n        let tagP = TAGGED_HASH_PREFIXES[tag];\r\n        if (tagP === undefined) {\r\n            const tagH = await exports.utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\r\n            tagP = concatBytes(tagH, tagH);\r\n            TAGGED_HASH_PREFIXES[tag] = tagP;\r\n        }\r\n        return exports.utils.sha256(tagP, ...messages);\r\n    },\r\n    taggedHashSync: (tag, ...messages) => {\r\n        if (typeof exports.utils.sha256Sync !== 'function')\r\n            throw new Error('utils.sha256Sync is undefined, you need to set it');\r\n        let tagP = TAGGED_HASH_PREFIXES[tag];\r\n        if (tagP === undefined) {\r\n            const tagH = exports.utils.sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\r\n            tagP = concatBytes(tagH, tagH);\r\n            TAGGED_HASH_PREFIXES[tag] = tagP;\r\n        }\r\n        return exports.utils.sha256Sync(tagP, ...messages);\r\n    },\r\n    precompute(windowSize = 8, point = Point.BASE) {\r\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\r\n        cached._setWindowSize(windowSize);\r\n        cached.multiply(_3n);\r\n        return cached;\r\n    },\r\n};\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.schnorr = exports.Signature = exports.Point = exports.CURVE = exports.utils = exports.getSharedSecret = exports.recoverPublicKey = exports.verify = exports.signSync = exports.sign = exports.getPublicKey = void 0;\r\nconst hmac_1 = require(\"@noble/hashes/hmac\");\r\nconst sha256_1 = require(\"@noble/hashes/sha256\");\r\nconst secp256k1_1 = require(\"@noble/secp256k1\");\r\nvar secp256k1_2 = require(\"@noble/secp256k1\");\r\nObject.defineProperty(exports, \"getPublicKey\", { enumerable: true, get: function () { return secp256k1_2.getPublicKey; } });\r\nObject.defineProperty(exports, \"sign\", { enumerable: true, get: function () { return secp256k1_2.sign; } });\r\nObject.defineProperty(exports, \"signSync\", { enumerable: true, get: function () { return secp256k1_2.signSync; } });\r\nObject.defineProperty(exports, \"verify\", { enumerable: true, get: function () { return secp256k1_2.verify; } });\r\nObject.defineProperty(exports, \"recoverPublicKey\", { enumerable: true, get: function () { return secp256k1_2.recoverPublicKey; } });\r\nObject.defineProperty(exports, \"getSharedSecret\", { enumerable: true, get: function () { return secp256k1_2.getSharedSecret; } });\r\nObject.defineProperty(exports, \"utils\", { enumerable: true, get: function () { return secp256k1_2.utils; } });\r\nObject.defineProperty(exports, \"CURVE\", { enumerable: true, get: function () { return secp256k1_2.CURVE; } });\r\nObject.defineProperty(exports, \"Point\", { enumerable: true, get: function () { return secp256k1_2.Point; } });\r\nObject.defineProperty(exports, \"Signature\", { enumerable: true, get: function () { return secp256k1_2.Signature; } });\r\nObject.defineProperty(exports, \"schnorr\", { enumerable: true, get: function () { return secp256k1_2.schnorr; } });\r\n// Enable sync API for noble-secp256k1\r\nsecp256k1_1.utils.hmacSha256Sync = (key, ...messages) => {\r\n    const h = hmac_1.hmac.create(sha256_1.sha256, key);\r\n    messages.forEach(msg => h.update(msg));\r\n    return h.digest();\r\n};\r\n", "export default require(\"./node_modules/ethereum-cryptography/secp256k1.js\");"],
  "mappings": "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",
  "names": ["d"]
}
